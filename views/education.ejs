<ul id="educationList">
    <button onclick="addEducation()">add education</button>
    <% if(education && education.length > 0) { %> <% education.forEach(exp => { %>
    <li id="<%= exp.id %>">
        <h3> <%= exp.degree %> </h3>
        <h4> in <strong><%= exp.field_of_study %></strong> </h4>
        <p>in <span> <%= exp.location %> </span> </p>
        <p> from <strong><%= exp.institution %></strong> </p>
        <p><span> <%= exp.start_date %></span> to <span><%= exp.end_date %></span></p>
        <p><%= exp.description %></p>
        <div>
            <button data-id="<%= exp.id %>" onclick="editEducation(this)">Edit</button>
            <button data-id="<%= exp.id %>" onclick="deleteEducation(this)">Delete</button>
        </div>
    </li>
    <% }) %> <% } else { %>
    <p>No education found.</p>
    <% } %>
</ul>
<form class="userDataForm educationForm" onsubmit="formSubmit(event)">
    <h1>Education</h1>
    <input type="hidden" name="user_id" value="<%= user.id %>" />
    <label>Degree</label>
    <input type="text" name="degree" required />
    <label>Field of Study</label>
    <input type="text" name="field_of_study" required />
    <label>Institution</label>
    <input type="text" name="institution" required />
    <label>Location</label>
    <input type="text" name="location" required />
    <div>
        <div>
            <label>Start Date</label>
            <input type="date" name="start_date" required />
        </div>
        <div>
            <label>End Date</label>
            <input type="date" name="end_date" required />
        </div>
    </div>
    <label>Description</label>
    <textarea rows="3" name="description"></textarea>
    <p id="error"></p>
    <p id="loading"></p>
    <div>
        <button type="button" onclick="cancelAddEducation()">Cancel</button>
        <button type="submit" id="submitButton">Add Education</button>
    </div>
</form>

<script>
    function formSubmit(event) {
        const form = document.querySelector('.educationForm');
        event.preventDefault();
        const formData = new FormData(form);
        const { user_id, degree, field_of_study, institution, location, start_date, end_date, description } = Object.fromEntries(formData.entries());
        if (!user_id || !degree || !field_of_study || !institution || !location || !start_date || !end_date || !description) {
            document.getElementById('error').innerHTML = 'Please fill in all required fields';
            return;
        }
        if (new Date(start_date) > new Date(end_date)) {
            document.getElementById('error').innerHTML = 'Start date cannot be after end date';
            return;
        }

        const startTransition = (callback) => {
            try {
                document.getElementById('loading').innerHTML = 'Loading...';
                document.getElementById('submitButton').disabled = true;
                callback();
            } finally {
                document.getElementById('loading').innerHTML = '';
                document.getElementById('submitButton').disabled = false;
            }
        };

        startTransition(async () => {
            await fetch('/api/education', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id,
                    degree,
                    field_of_study,
                    institution,
                    location,
                    start_date,
                    end_date,
                    description,
                }),
            })
                .then(async (res) => {
                    if (res.ok) {
                        const ul = document.getElementById('educationList');
                        const li = document.createElement('li');
                        const data = await res.json();
                        li.id = data.id;
                        li.innerHTML = `
                        <h3>${degree}</h3>
                        <h4>in <strong>${field_of_study}</strong></h4>
                        <p><span>in ${location}</span></p>
                        <p>from <strong>${institution}</strong></p>
                        <p><span>${start_date}</span> to <span>${end_date}</span></p>
                        <p>${description}</p>
                        <div>
                            <button data-id="${data.id}" onclick="editEducation(this)">Edit</button>
                            <button data-id="${data.id}" onclick="deleteEducation(this)">Delete</button>
                        </div> 
                        `;
                        ul.appendChild(li);
                        form.reset();
                        form.style.display = 'none';
                    } else {
                        document.getElementById('error').innerHTML = await res.text();
                    }
                })
                .catch((err) => {
                    console.error(err);
                    document.getElementById('error').innerHTML = 'Internal server error';
                });
        });
    }
    function addEducation() {
        const form = document.querySelector('.educationForm');
        form.style.display = form.style.display === 'flex' ? 'none' : 'flex';
    }
    function cancelAddEducation() {
        const form = document.querySelector('.userDataForm.educationForm');
        form.style.display = 'none';
    }
    function deleteEducation(button) {
        const id = button.getAttribute('data-id');
        const startTransition = (callback) => {
            try {
                document.getElementById('loading').innerHTML = 'Loading...';
                button.disabled = true;
                callback();
            } finally {
                document.getElementById('loading').innerHTML = '';
                button.disabled = false;
            }
        };
        startTransition(async () => {
            await fetch(`/api/education/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then(async (res) => {
                if (res.ok) {
                    document.getElementById(id).remove();
                } else {
                    document.getElementById('error').innerHTML = await res.text();
                }
            });
        });
    }

    function editEducation(button) {
        const id = button.getAttribute('data-id');
        const li = document.getElementById(id);
        const degree = li.querySelector('h3').innerText;
        const field_of_study = li.querySelector('h4 strong').innerText;
        const location = li.querySelector('p:nth-of-type(1) span').innerText;
        const institution = li.querySelector('p:nth-of-type(2) strong').innerText;
        const start_date = li.querySelector('p:nth-of-type(3) span:nth-of-type(1)').innerText;
        const end_date = li.querySelector('p:nth-of-type(3) span:nth-of-type(2)').innerText;
        const description = li.querySelector('p:nth-of-type(4)').innerText;

        const form = document.querySelector('.educationForm');
        form.style.display = 'flex';
        form.degree.value = degree;
        form.field_of_study.value = field_of_study;
        form.location.value = location;
        form.institution.value = institution;
        form.start_date.value = start_date;
        form.end_date.value = end_date;
        form.description.value = description;

        form.onsubmit = function (event) {
            event.preventDefault();

            const startTransition = (callback) => {
                try {
                    document.getElementById('loading').innerHTML = 'Loading...';
                    button.disabled = true;
                    callback();
                } finally {
                    document.getElementById('loading').innerHTML = '';
                    button.disabled = false;
                }
            };

            startTransition(async () => {
                const formData = new FormData(form);
                const { user_id, degree, field_of_study, institution, location, start_date, end_date, description } = Object.fromEntries(formData.entries());
                if (!user_id || !degree || !field_of_study || !institution || !location || !start_date || !end_date || !description) {
                    document.getElementById('error').innerHTML = 'Please fill in all required fields';
                    return;
                }
                if (new Date(start_date) > new Date(end_date)) {
                    document.getElementById('error').innerHTML = 'Start date cannot be after end date';
                    return;
                }
                await fetch(`/api/education/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        user_id,
                        degree,
                        field_of_study,
                        institution,
                        location,
                        start_date,
                        end_date,
                        description,
                    }),
                })
                    .then(async (res) => {
                        if (res.ok) {
                            li.querySelector('h3').innerText = degree;
                            li.querySelector('h4 strong').innerText = field_of_study;
                            li.querySelector('p:nth-of-type(1) span').innerText = location;
                            li.querySelector('p:nth-of-type(2) strong').innerText = institution;
                            li.querySelector('p:nth-of-type(3) span:nth-of-type(1)').innerText = start_date;
                            li.querySelector('p:nth-of-type(3) span:nth-of-type(2)').innerText = end_date;
                            li.querySelector('p:nth-of-type(4)').innerText = description;

                            form.reset();
                            form.style.display = 'none';
                        } else {
                            document.getElementById('error').innerHTML = await res.text();
                        }
                    })
                    .catch((err) => {
                        console.error(err);
                        document.getElementById('error').innerHTML = 'Internal server error';
                    });
            });
        };
    }
</script>
